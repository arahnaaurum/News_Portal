News Portal

Краткое описание:
Приложение на Django для публикации и просмотра новостей.
База данных - по умолчанию (SQLite).
Стартовая страница пользовательского интерфейса: http://127.0.0.1:8000/news

Полное описание:
0. URL:
        http://127.0.0.1:8000 - стартовая страница
        http://127.0.0.1:8000/news - список с превью всех новостей (с пагинацией)
        http://127.0.0.1:8000/news/<id новости> - страница для полной информации об отдельной новости
        http://127.0.0.1:8000/news/<id новости>/edit/ - изменение новости
        http://127.0.0.1:8000/news//<id новости>/delete/ - удаление новости
        http://127.0.0.1:8000/news/create/ - создание новости
        http://127.0.0.1:8000/news/subscribe/ - подписка на категорию новостей
        http://127.0.0.1:8000/accounts/signup/ - регистрация нового пользователя
        http://127.0.0.1:8000/accounts/login/ - логин
        http://127.0.0.1:8000/accounts/logout/ - логаут
        http://127.0.0.1:8000/personal/ - личная страница пользователя
        http://127.0.0.1:8000/personal/authors/ - добавить пользователя в группу "authors"
        http://127.0.0.1:8000/news/api/ - API Root
        http://127.0.0.1:8000/news/api/new/ - API для постов типа news
        http://127.0.0.1:8000/news/api/art/ - API для постов типа article

1. Модели:
        Author - модель, содержащая объекты всех авторов.
        Category - категории новостей.
        Comment - для реализации функционала комментирования новостей.
        PostCategory - промежуточная модель для связи «многие ко многим» между моделями Post и Category.
        Post - новости, которые создают пользователи. Каждый объект может иметь одну или несколько категорий.

        Дополнительно: введено ограничение количества постов - 3 в день для каждого автора.
            Реализация:
            1) models.py: модель Author имеет целочисленное поле max_post, по умолчанию = 0
            2) signals.py: при создании поста соответствующим автором max_post увеличивается на +1 (update_maxpost())
            3) models.py: модель Post переопределен метод clean() - если количество постов автора за день превышает
            maxpostnumber (3), вызывается ошибка
            4) runapschediler.py: установлена задача каждые сутки в 00.00 обнулять поле max_post для всех авторов

            Альтернативный вариант решения:
            1) Модель Author: создать целочисленное поле max_number_of_posts, установить максимальное кол-во постов
            2) Модель Post: переопределить метод clean() следующим образом:
                def clean(self):
                    cleaned_data = super().clean()
                    today_posts = Post.objects.filter(time_creation__range=[datetime.now() - timedelta(days=1), datetime.now()], author = self.author)
                    if  today_posts.length >= self.author.max_post:
                        raise ValidationError("You may not post more than 3 times per day")
                    return cleaned_data

2. Представления и шаблоны:
        news_app/views.py: В проекте используюся дженерики Django (ListView, DetailView и т.д.) для вывода полного
        списка новостей / информации о конкретной новости, создания/апдейта/удаления новости.

        news_app/forms.py: для администрирования новостей используются средства django.forms ()

        news_app/templates/: Страницы приложения наследуют от основного шаблона news_app/templates/flatpages/default.html
        news_app/templatetags/custom_filters.py содержит кастомизированный фильтз Censor, который цензурирует
        нежелательную лексику в названиях и текстах статей.

        Настроено низкоуровневое кэширование новостей (news_app/views.py) и кэширование в HTML-шаблонах.

3. Пользователь: регистрация, авторизация, группы
        Для регистрации и авторизации пользователя используется пакет allauth.
        Регистрация включает в себя получение письма с кодом активации (кастомизированная форма письма:
        templates/account/email/email_confirmation_signup_message.html)
        Реализована возможность регистрации через Google-аккаунт (OAuth).
        Созданы пользовательские группы common (по умолчанию) и authors. Для группы authors предоставлены права
        создания и редактирования объектов модели Post.
        В классах-представлениях добавления и редактирования новостей добавлена проверка прав доступа.

4. Периодическая рассылка писем:
        Реализована возможность пользователей подписываться на категории новостей.
        Если пользователь подписан на какую-либо категорию, ему осуществляется email-рассылка:
            - при добавлении новость соответствующей категории - с кратким содержанием новости;
            - еженедельно - со списком новых статей, появившихся за неделю;
        В проекте реализованы две возможности осуществления задач по расписанию:
        1) через runapscheduler (news_app/management/commands/runapscheduler.py) и сигналы (news_app/signals.py)
        2) при помощи celery и Redis (celery.py);

5. Логирование: в настройках (settings.py) проекта содержатся настройки кастомизированного логирования. При
необходимости следует раскомментить их и изменить в соответствии с текущими потребностями проекта.

6. Локализация:
        Добавлена локализация языка (rus/eng) с переводом новостей и текстовых элементов шаблонов.
        Добавлена локализация времени с возможностью выбирать часовой пояс. Отображение тёмной/светлой темы
        оформления зависит от времени пользователя.

7. REST API:
    Публичный API приложения реализован при помощи Django Rest Framework.
    http://127.0.0.1:8000/news/api/ - API Root
    http://127.0.0.1:8000/news/api/new/ - API для постов типа news
    http://127.0.0.1:8000/news/api/art/ - API для постов типа article
